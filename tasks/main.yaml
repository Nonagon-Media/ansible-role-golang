---

# If I ever need to support other platforms this is a viable option

# - name: resolve platform specific vars
#   include_vars: '{{ item }}'
#   with_first_found:
#     - files:
#         - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
#         - '{{ ansible_distribution }}.yml'
#         - '{{ ansible_os_family }}.yml'
#       skip: true
#       paths:
#         - '{{ role_path }}/vars'

- name: Golang - check for install...
  stat:
    path: '{{ ansible_env.HOME }}/{{go_parent_dir}}/{{ go_ver }}'
  changed_when: False
  register: go_install_path

- name: Golang - install
  when: not go_install_path.stat.exists
  block:
    - name: download go archive...
      get_url:
        url: '{{ go_tgz_url }}'
        dest: /tmp/{{ go_tgz }}
        checksum: '{{ go_checksum }}'
        mode: '0644'
    - name: unarchive go...
      unarchive:
        copy: no
        src: /tmp/{{ go_tgz }}
        dest: '/tmp/go/extracted/{{ go_tgz }}'
        creates: '/tmp/go/extracted/go'
    - name: move to location
      raw: mv /tmp/go/extracted/go {{ ansible_env.HOME }}/{{go_parent_dir}}/{{ go_ver }}
      creates: '{{ ansible_env.HOME }}/{{go_parent_dir}}/{{ go_ver }}'
  always:
    - name: cleanup
      become: '{{ go_privilege_escalation }}'
      become_user: root
      file:
        path: /tmp/{{ item }}
        state: absent
      loop:
        - {{ go_tgz }}
        - go